class Piece

types
	public Type = <I>| <J> | <L> | <O> | <S> | <T> | <Z>;
	public Coordinate :: x: int y: int;
	public Direction = <Up> | <Down> | <Right>| <Left>;
	public Sprite = seq of Coordinate;

instance variables
	public static pieceTypes: seq of Type := [<I>, <J>, <L>, <O>, <S>, <T>, <Z>];
	protected position : Coordinate;
	protected originalTiles: Sprite;
	protected tiles: Sprite;
	protected symbol: char;
	
operations
	public Piece: int * int * char * Sprite ==> Piece
	Piece(x,y,s,t) == (
		symbol := s;
		originalTiles := t;
		tiles := t;
		position := mk_Coordinate(x,y);
	);
	
	public static createNewPiece: Type ==> Piece
	createNewPiece(t) == (
		dcl p: Piece;
		cases t: 
			<I> -> p := new IShapePiece(),
			<J> -> p := new JShapePiece(),
			<L> -> p := new LShapePiece(),
			<O> -> p := new OShapePiece(),
			<S> -> p := new SShapePiece(),
			<T> -> p := new TShapePiece(),
			<Z> -> p := new ZShapePiece()
		end;
		return p;
	);
	
	public getTiles: () ==> seq of Coordinate
	getTiles () == (
		return tiles;
	);
	
	protected movePiece: int * int ==> ()
	movePiece(x,y) == (
		position.x := position.x + x;
		position.y := position.y + y;
	);
	
	public down: () ==> ()
	down() == (
		movePiece(0,1);
	);
	
	public left: () ==> ()
	left() == (
		movePiece(-1,0);
	);
	
	public right: () ==> ()
	right() == (
		movePiece(1,0);
	);
	
	public getSymbol : () ==> char
	getSymbol () == return symbol;
	
functions

end Piece