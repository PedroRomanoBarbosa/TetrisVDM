class Piece

types
	public Type = <I>| <J> | <L> | <O> | <S> | <T> | <Z>;
	public SpriteMap = map Type to Sprite;
	public Coordinate :: x: int y: int;
	public Sprite = seq of Coordinate;
	
values
	public DEFAULT_SPRITES: SpriteMap = {
		<I> |-> [mk_Coordinate(-1, -1), mk_Coordinate(0, -1), mk_Coordinate(1, -1), mk_Coordinate(2, -1)],
		<J> |-> [mk_Coordinate(0, 1), mk_Coordinate(0, -1), mk_Coordinate(0, 0), mk_Coordinate(-1, 1)],
		<L> |-> [mk_Coordinate(0, 1), mk_Coordinate(0, -1), mk_Coordinate(0, 0), mk_Coordinate(1, 1)],
		<S> |-> [mk_Coordinate(1, -1), mk_Coordinate(0, -1), mk_Coordinate(0, 0), mk_Coordinate(-1, 0)],
		<Z> |-> [mk_Coordinate(-1, -1), mk_Coordinate(0, -1), mk_Coordinate(0, 0), mk_Coordinate(1, 0)],
		<T> |-> [mk_Coordinate(0, 0), mk_Coordinate(0, -1), mk_Coordinate(1, 0), mk_Coordinate(-1, 0)],
		<O> |-> [mk_Coordinate(0, 0), mk_Coordinate(1, 1), mk_Coordinate(1, 0), mk_Coordinate(0, 1)]
	};

instance variables
	protected translation: Coordinate;
	protected originalTiles: Sprite;
	protected sprite: Sprite;
	protected symbol: char;
	-- All coordinates in sprites must be different
	inv forall t in set rng DEFAULT_SPRITES 
		& not exists a,b in set inds t
		& a <> b and t(a) = t(b);
	
operations
	public Piece: int * int * Type * char ==> Piece
	Piece(x, y, t, s) == (
		symbol := s;
		originalTiles := DEFAULT_SPRITES(t);
		sprite := DEFAULT_SPRITES(t);
		translation := mk_Coordinate(0, 0);
		move(x,y);
	) post s = symbol
		and originalTiles = DEFAULT_SPRITES(t) 
		and sprite = DEFAULT_SPRITES(t) 
		and translation.x = 0 or translation.x = x
		and translation.y = 0 or translation.y = y;
	
	public static createNewPiece: Type * char ==> Piece
	createNewPiece(type, s) == (
		dcl p: Piece;
		cases type:
			<O> -> p := new Piece(0, 0, type, s),
			<I> -> p := new IShapePiece(0, 0, s),
			others -> p := new PivotPiece(0, 0, type, s)
		end;
		return p;
	);
	
	public getSprite: () ==> Sprite
	getSprite () == (
		return sprite;
	);
	
	public getOriginalSprite: () ==> Sprite
	getOriginalSprite() == (
		return originalTiles;
	);
	
	public getTranslation: () ==> Coordinate
	getTranslation() == (
		return translation;
	);
	
	public setTranslation: int * int ==> ()
	setTranslation(x, y) == (
		translation.x := x;
		translation.y := y;
		sprite := translateSprite(sprite, translation.x, translation.y);
	) post translation.x = x
		and translation.y = y
		and len sprite = len sprite~;
	
	public move: int * int ==> ()
	move(x, y) == (
		translation.x := translation.x + x;
		translation.y := translation.y + y;
		sprite := translateSprite(sprite, x, y);
	) post translation.x = translation~.x + x
		and translation.y = translation~.y + y
		and len sprite = len sprite~;
	
	protected translateSprite: Sprite * int * int ==> Sprite
	translateSprite(sp, x, y) == (
		dcl newSp: Sprite := sp;
		for inc = 1 to len sp do (
			newSp(inc).x := sp(inc).x + x; 
			newSp(inc).y := sp(inc).y + y;
		);
		return newSp;
	)
	post forall index in set inds RESULT & RESULT(index).x = sp(index).x + x and RESULT(index).y = sp(index).y + y;
	
	public getSymbol : () ==> char
	getSymbol () == (
		return symbol;
	);
	
	public rotate: () ==> ()
	rotate() == (
		return;
	);
	
	public getRotation: () ==> nat1
	getRotation() == (
		return 1;
	)
	post RESULT = 1;
	
	public setRotation: nat1 ==> ()
	setRotation(rot) == (
		return;
	);
	
functions

end Piece