class Table

types
	public Row = seq of char;
	
values

instance variables
	private rows: nat;
	private columns: nat;
	private table: seq of Row;
	private pieces: set of Piece;
	private pieceTypes: seq of Piece`Type := [<I>, <J>, <L>, <O>, <S>, <T>, <Z>];
	
operations
	public Table: nat * nat ==> Table
	Table(r,c) == (
		rows := r;
		columns := c;
		pieces := {};
		table := [];
		for inc1 = 1 to rows do (
			dcl tempRow: Row := [];
			for inc2 = 1 to columns do (
				tempRow := tempRow ^ ['0'];
			);
			table := table ^ [tempRow];
		);
		return self;
	);
		
	public print: () ==> seq of Row
	print() == (
		return table;
	);
	
	public newPiece: () ==> ()
	newPiece() == (
		dcl p: Piece := new Piece();
		pieces := pieces union {p};
	);
	
	public getRandomPieceType: () ==> Piece`Type
	getRandomPieceType() == (
		return pieceTypes(0);
	);
			
functions

traces

end Table