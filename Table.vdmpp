class Table

types
	public Row = seq of char;
	
values
	public emptyTile: char = ' ';

instance variables
	private rows: nat;
	private columns: nat;
	private table: seq of Row;
	private currentPiece: Piece;
	
operations
	public Table: nat * nat ==> Table
	Table(r,c) == (
		rows := r;
		columns := c;
		table := [];
		for inc1 = 1 to rows do (
			dcl tempRow: Row := [];
			for inc2 = 1 to columns do (
				tempRow := tempRow ^ [' '];
			);
			table := table ^ [tempRow];
		);
		return self;
	)
	pre r > c
	post len table = r;
	
	public getRandomPiece: () ==> Piece`Type
	getRandomPiece() == (
		return Piece`pieceTypes(MATH`rand(7) + 1);
	);
	
	public setCurrentPiece: Piece ==> ()
	setCurrentPiece(p) == (
		currentPiece := p;
		paintCurrentPiece();
	);
	
	public getTile: nat1 * nat1 ==> char
	getTile(x,y) == (
		return table(y)(x);
	);
	
	private moveCurrentPiece: int * int ==> ()
	moveCurrentPiece(x,y) == (
		removeCurrentPiece();
		currentPiece.move(x,y);
		paintCurrentPiece();
	);
	
	public moveCurrentPieceDown: () ==> ()
	moveCurrentPieceDown() == (
		moveCurrentPiece(0,1);
	);
	
	public moveCurrentPieceLeft: () ==> ()
	moveCurrentPieceLeft() == (
		moveCurrentPiece(-1,0);
	);
	
	public moveCurrentPieceRight: () ==> ()
	moveCurrentPieceRight() == (
		moveCurrentPiece(1,0);
	);
	
	public rotateCurrentPiece: nat1 ==> ()
	rotateCurrentPiece(rot) == (
		removeCurrentPiece();
		currentPiece.rotate(rot);
		paintCurrentPiece();
	);
	
	-- Checks the adjacent
	public checkCurrentPieceDownCollision: () ==> bool
	checkCurrentPieceDownCollision() == (
		dcl sprite: Piece`Sprite := currentPiece.getTiles();
		for tile in sprite do (
			if tile.y <> rows then (
				if table(tile.y + 1)(tile.x) <> ' ' and mk_Piece`Coordinate(tile.x, tile.y + 1) not in set elems sprite then
					return true;
			) else
				return true;
		);
		return false;
	);
	
	public next: () ==> ()
	next() == (
		removeCurrentPiece();
		moveCurrentPieceDown();
		paintCurrentPiece();
		print();
	);
	
	private paintCurrentPiece: () ==> ()
	paintCurrentPiece() == (
		paint(currentPiece.getTiles(), currentPiece.getSymbol());
	);
	
	private removeCurrentPiece: () ==> ()
	removeCurrentPiece() == (
		paint(currentPiece.getTiles(), ' ');
	);
	
	private paint: seq of Piece`Coordinate * char ==> ()
	paint(positions, symbol) == (
		for pos in positions do (
			table(pos.y)(pos.x) := symbol;
		);
	);
	
	public print: () ==> ()
	print() == (
		IO`print("#");
		for inc = 1 to columns do (
			IO`print("#");
		);
		IO`println("#");
		for e in table do (
			IO`print("#");
			IO`print(e);
			IO`println("#");
		);
		IO`print("#");
		for inc = 1 to columns do (
			IO`print("#");
		);
		IO`println("#");
	);
			
functions

traces

end Table