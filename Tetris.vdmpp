class Tetris

types
	public Row = seq of char;
	
values
	private EMPTY_TILE: char = ' ';
	private PIECE_TYPES: seq of Piece`Type = [<I>, <J>, <L>, <O>, <S>, <T>, <Z>];
	private PIECE_SYMBOLS: seq of char = ['I', 'J', 'L', 'O', 'S', 'T', 'Z'];

instance variables
	private finished: bool;
	private linesCleared: nat;
	private rows: nat;
	private columns: nat;
	private table: seq of Row;
	private currentPiece: Piece;
	private nextPiece: Piece;
	private beginning: bool;
	
operations
	/*
	* Constructor. Builds the tetris board and initializes variables.
	*/
	public Tetris: nat * nat ==> Tetris
	Tetris(r,c) == (
		beginning := true;
		finished := false;
		linesCleared := 0;
		rows := r;
		columns := c;
		table := [];
		for inc1 = 1 to rows do (
			dcl tempRow: Row := [];
			for inc2 = 1 to columns do (
				tempRow := tempRow ^ [EMPTY_TILE];
			);
			table := table ^ [tempRow];
		);
		return self;
	) pre r >= 22
		and c = 10
		post rows = r
		and columns = c
		and len table = r
		and forall r in seq table & forall t in seq r & t = ' '
		and linesCleared = 0
		and beginning = true
		and finished = false;
	
	/*
	* Sets a random piece for the current one and another for the next piece.
	*/
	private setRandomPiece: () ==> ()
	setRandomPiece() == (
		dcl rand: int := MATH`rand(len PIECE_TYPES) + 1;
		dcl randNext: int := MATH`rand(len PIECE_TYPES) + 1;
		dcl randRot: int := MATH`rand(4) + 1;
		dcl positions: seq of nat1;
		if beginning then (
			currentPiece := Piece`createNewPiece(PIECE_TYPES(rand), PIECE_SYMBOLS(rand));
			nextPiece := Piece`createNewPiece(PIECE_TYPES(randNext), PIECE_SYMBOLS(randNext));
			beginning := false;
		) else (
			currentPiece := nextPiece;
			nextPiece := Piece`createNewPiece(PIECE_TYPES(randNext), PIECE_SYMBOLS(randNext));
		);
		for inc = 1 to randRot do 
			currentPiece.rotate();
		positions := getCurrentPieceHorizontalInitialPositions();
		currentPiece.move(positions(MATH`rand(len positions) + 1), 0);
		if checkOverlap() then finished := true;
		while checkBoardCollisionInY() do (
				currentPiece.move(0, 1);
		);
		if checkOverlap() or checkDownCollision(currentPiece.getSprite()) then (
			finished := true;
			while checkOverlap() do
					currentPiece.move(0, -1);
		);
		paintCurrentPiece();
	) post currentPiece <> nextPiece; 
	
	public isGameFinished: () ==> bool
	isGameFinished() == (
		return finished;
	) post finished = finished~;
	
	public getCurrentPiece: () ==> Piece
	getCurrentPiece() == (
		return currentPiece;
	) post currentPiece = currentPiece~;
	
	public getNextPiece: () ==> Piece
	getNextPiece() == (
		return nextPiece;
	) post nextPiece = nextPiece~;
	
	public getTile: nat1 * nat1 ==> char
	getTile(x,y) == (
		return table(y)(x);
	) pre x > 0 and x <= columns
		and y > 0 and y <= rows;
	
	public getLinesCleared: () ==> nat1
	getLinesCleared() == (
		return linesCleared;
	) post linesCleared = linesCleared~;
	
	/*
	* Initiates the tetris game.
	*/
	public init: () ==> ()
	init() == (
		setRandomPiece();
	) pre finished = false
		and beginning = true;

	/*
	* Drops current piece and assigns to the next piece.
	*/
	public next: () ==> ()
	next() == (
		if checkDownCollision(currentPiece.getSprite()) then (
			checkLines();
			setRandomPiece();
		);
	) pre finished = false
		post currentPiece = nextPiece~;
	
	private moveCurrentPiece: int * int ==> ()
	moveCurrentPiece(x,y) == (
		removeCurrentPiece();
		currentPiece.move(x,y);
		paintCurrentPiece();
	);
	
	public moveCurrentPieceDown: () ==> ()
	moveCurrentPieceDown() == (
		if not checkDownCollision(currentPiece.getSprite()) then (
			moveCurrentPiece(0,1);
		) else (
			next();
		);
	);
	
	public moveCurrentPieceUp: () ==> ()
	moveCurrentPieceUp() == (
			moveCurrentPiece(0,-1);
	);
	
	public moveCurrentPieceLeft: () ==> ()
	moveCurrentPieceLeft() == (
		if not checkLeftCollision(currentPiece.getSprite()) then
			moveCurrentPiece(-1,0);
	);
	
	public moveCurrentPieceRight: () ==> ()
	moveCurrentPieceRight() == (
		if not checkRightCollision(currentPiece.getSprite()) then
			moveCurrentPiece(1,0);
	);
	
	public rotate: () ==> ()
	rotate() == (
		removeCurrentPiece();
		rotateCurrentPiece();
	);
	
	private rotateCurrentPiece: () ==> ()
	rotateCurrentPiece() == (
		dcl originalTranslation: Piece`Coordinate := currentPiece.getTranslation();
		dcl originalRot: nat1 := currentPiece.getRotation();
		dcl valid: bool := false;
		dcl boardCheck: bool * bool * bool * bool;
		currentPiece.rotate();
		while not valid do (
			boardCheck := checkBoardOverlap();
			if boardCheck = mk_(false, false, false, false) then (
				valid := true;
			) else (
				if boardCheck.#1 then currentPiece.move(0, 1);
				if boardCheck.#2 then currentPiece.move(0, -1);
				if boardCheck.#3 then currentPiece.move(1, 0);
				if boardCheck.#4 then currentPiece.move(-1, 0);
			)
		);
		if checkOverlap() then (
			currentPiece.setRotation(originalRot);
			currentPiece.setTranslation(originalTranslation.x, originalTranslation.y);
		);
		paintCurrentPiece();
	);
	
	/*
	* Checks if the current piece has at least one tile out of the board.
	*/
	public checkBoardOverlap: () ==> bool * bool * bool * bool
	checkBoardOverlap() == (
		dcl up: bool := false;
		dcl down: bool := false;
		dcl left: bool := false;
		dcl right: bool := false;
		for tile in currentPiece.getSprite() do (
			if tile.y < 1 then up := true;
			if tile.x < 1 then left := true;
			if tile.x > columns then right := true;
			if tile.y > rows then down := true;
		);
		return mk_(up, down, left, right);
	);
	
	/*
	* Checks if the current piece is overlapping with another one.
	*/
	public checkOverlap: () ==> bool
	checkOverlap() == (
		for tile in currentPiece.getSprite() do (
			if tile.y > 0 and tile.y <= rows and tile.x > 0 and tile.x <= columns then
				if table(tile.y)(tile.x) <> ' ' then return true;
		);
		return false;
	);
	
	/*
	* Checks if the current piece has another one underneath.
	*/
	public checkDownCollision: Piece`Sprite ==> bool
	checkDownCollision(sp) == (
		for tile in sp do (
			if tile.y <> rows and tile.y > 0 then (
				if table(tile.y + 1)(tile.x) <> ' ' and mk_Piece`Coordinate(tile.x, tile.y + 1) not in set elems sp then
					return true;
			) else
				return true;
		);
		return false;
	);
	
	/*
	* Checks if the current piece has another one to its right.
	*/
	public checkRightCollision: Piece`Sprite ==> bool
	checkRightCollision(sp) == (
		for tile in sp do (
			if tile.x <> columns then (
				if table(tile.y)(tile.x + 1) <> ' ' and mk_Piece`Coordinate(tile.x + 1, tile.y) not in set elems sp then
					return true;
			) else
				return true;
		);
		return false;
	);
	
	/*
	* Checks if the current piece has another one to its left.
	*/
	public checkLeftCollision: Piece`Sprite ==> bool
	checkLeftCollision(sp) == (
		for tile in sp do (
			if tile.x <> 1 then (
				if table(tile.y)(tile.x - 1) <> ' ' and mk_Piece`Coordinate(tile.x - 1, tile.y) not in set elems sp then
					return true;
			) else
				return true;
		);
		return false;
	);
	
	/*
	* Move the piece down until it has a collision.
	*/
	public drop: () ==> ()
	drop() == (
		while not checkDownCollision(currentPiece.getSprite()) do
			moveCurrentPiece(0,1);
	);
	
	/*
	* Checks if there are any lines completed, removes them and pulls the remaining
	* down.
	*/
	private checkLines: () ==> ()
	checkLines() == (
		dcl completeRows: seq of Row := [ r | r in seq table & ' ' not in set elems r];
		dcl incompleteRows: seq of Row := [ r | r in seq table & ' ' in set elems r];
		dcl newLines: int := len completeRows;
		clearTable();
		for inc = 1 to len incompleteRows do (
			table(inc + newLines) := incompleteRows(inc);
		);
		linesCleared := linesCleared + newLines;
	) post linesCleared >= linesCleared~;
	
	public paintCurrentPiece: () ==> ()
	paintCurrentPiece() == (
		paint(currentPiece.getSprite(), currentPiece.getSymbol());
	);
	
	public removeCurrentPiece: () ==> ()
	removeCurrentPiece() == (
		paint(currentPiece.getSprite(), ' ');
	);
	
	private paint: seq of Piece`Coordinate * char ==> ()
	paint(positions, symbol) == (
		for pos in positions do (
			if pos.y > 0 and pos.y <= rows and pos.x > 0 and pos.x <= columns then
 				table(pos.y)(pos.x) := symbol;
		);
	);
	
	/*
	* Gets all the available positions in x for the currentPiece.
	*/
	private getCurrentPieceHorizontalInitialPositions: () ==> seq of nat1
	getCurrentPieceHorizontalInitialPositions() == (
		dcl positions: seq of nat1 := [];
		dcl inc: nat1 := 1;
		dcl result: bool * bool := checkBoardCollisionInX(inc);
		while not result.#2 do (
			if not result.#1 then (
				positions := positions ^ [inc];
			);
			inc := inc + 1;
			result := checkBoardCollisionInX(inc);
		);
		return positions;
	);
	
	private checkBoardCollisionInX: nat1 ==> bool * bool
	checkBoardCollisionInX(x) == (
		dcl rightSideCollision: bool := false;
		dcl leftSideCollision: bool := false;
		for t in currentPiece.getSprite() do (
			if t.x + x > columns then rightSideCollision := true;
			if t.x + x <= 0  then leftSideCollision := true;
		);
		return mk_(leftSideCollision, rightSideCollision);
	);
	
	private checkBoardCollisionInY: () ==> bool
	checkBoardCollisionInY() == (
		for t in currentPiece.getSprite() do (
			if t.y <= 0 then return true;
		);
		return false;
	);
	
	private clearTable: () ==> ()
	clearTable() == (
		for y = 1 to rows do (
			for x = 1 to columns do (
				table(y)(x) := ' ';
			);
		);
	) post forall r in seq table & forall t in seq r & t = ' '; 
	
	public print: () ==> ()
	print() == (
		IO`print("#");
		for inc = 1 to columns do (
			IO`print("#");
		);
		IO`println("#");
		for e in table do (
			IO`print("#");
			IO`print(e);
			IO`println("#");
		);
		IO`print("#");
		for inc = 1 to columns do (
			IO`print("#");
		);
		IO`println("#");
	);
			
functions

traces

end Tetris