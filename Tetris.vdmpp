class Tetris

types
	public Row = seq of char;
	
values
	private EMPTY_TILE: char = ' ';
	private PIECE_TYPES: seq of Piece`Type = [<I>, <J>, <L>, <O>, <S>, <T>, <Z>];
	private PIECE_SYMBOLS: seq of char = ['I', 'J', 'L', 'O', 'S', 'T', 'Z'];

instance variables
	private rows: nat;
	private columns: nat;
	private table: seq of Row;
	private currentPiece: Piece;
	
operations
	public Tetris: nat * nat ==> Tetris
	Tetris(r,c) == (
		rows := r;
		columns := c;
		table := [];
		for inc1 = 1 to rows do (
			dcl tempRow: Row := [];
			for inc2 = 1 to columns do (
				tempRow := tempRow ^ [EMPTY_TILE];
			);
			table := table ^ [tempRow];
		);
		return self;
	)
	pre r > c
	post len table = r;
	
	public setRandomPiece: () ==> ()
	setRandomPiece() == (
		dcl rand: int := MATH`rand(len PIECE_TYPES) + 1;
		dcl randRot: int := MATH`rand(4) + 1;
		dcl positions: seq of nat1;
		currentPiece := Piece`createNewPiece(PIECE_TYPES(rand), PIECE_SYMBOLS(rand));
		currentPiece.rotate(randRot);
		positions := getCurrentPieceHorizontalInitialPositions();
		currentPiece.move(positions(MATH`rand(len positions) + 1), 5);
		paintCurrentPiece();
	);
	
	public getTile: nat1 * nat1 ==> char
	getTile(x,y) == (
		return table(y)(x);
	);
	
	private moveCurrentPiece: int * int ==> ()
	moveCurrentPiece(x,y) == (
		removeCurrentPiece();
		currentPiece.move(x,y);
		paintCurrentPiece();
	);
	
	public moveCurrentPieceDown: () ==> ()
	moveCurrentPieceDown() == (
			moveCurrentPiece(0,1);
	);
	
	public moveCurrentPieceLeft: () ==> ()
	moveCurrentPieceLeft() == (
		moveCurrentPiece(-1,0);
	);
	
	public moveCurrentPieceRight: () ==> ()
	moveCurrentPieceRight() == (
		moveCurrentPiece(1,0);
	);
	
	public rotateCurrentPiece: nat1 ==> ()
	rotateCurrentPiece(rot) == (
		removeCurrentPiece();
		currentPiece.rotate(rot);
		paintCurrentPiece();
	);
	
	public checkCurrentPieceDownCollision: () ==> bool
	checkCurrentPieceDownCollision() == (
		dcl sprite: Piece`Sprite := currentPiece.getTiles();
		for tile in sprite do (
			if tile.y <> rows then (
				if table(tile.y + 1)(tile.x) <> ' ' and mk_Piece`Coordinate(tile.x, tile.y + 1) not in set elems sprite then
					return true;
			) else
				return true;
		);
		return false;
	);
	
	public checkCurrentPieceRightCollision: () ==> bool
	checkCurrentPieceRightCollision() == (
		dcl sprite: Piece`Sprite := currentPiece.getTiles();
		for tile in sprite do (
			if tile.x <> columns then (
				if table(tile.y)(tile.x + 1) <> ' ' and mk_Piece`Coordinate(tile.x + 1, tile.y) not in set elems sprite then
					return true;
			) else
				return true;
		);
		return false;
	);
	
	public checkCurrentPieceLeftCollision: () ==> bool
	checkCurrentPieceLeftCollision() == (
		dcl sprite: Piece`Sprite := currentPiece.getTiles();
		for tile in sprite do (
			if tile.x <> 1 then (
				if table(tile.y)(tile.x - 1) <> ' ' and mk_Piece`Coordinate(tile.x - 1, tile.y) not in set elems sprite then
					return true;
			) else
				return true;
		);
		return false;
	);
	
	public drop: () ==> ()
	drop() == (
		while not checkCurrentPieceDownCollision() do moveCurrentPieceDown();
	);
	
	public pushLeft: () ==> ()
	pushLeft() == (
		while not checkCurrentPieceLeftCollision() do moveCurrentPieceLeft();
	);
	
	public pushRight: () ==> ()
	pushRight() == (
		while not checkCurrentPieceRightCollision() do moveCurrentPieceRight();
	);
	
	public checkLines: () ==> ()
	checkLines() == (
		dcl incompleteRows: seq of Row := [ r | r in seq table & ' ' in set elems r];
		clearTable();
		for inc = 1 to len incompleteRows do (
			table(inc) := incompleteRows(inc);
		);
	);
	
	public init: () ==> ()
	init() == (
		setRandomPiece();
	);
	
	public next: () ==> ()
	next() == (
		if not checkCurrentPieceDownCollision() then
			moveCurrentPieceDown();
	);
	
	private paintCurrentPiece: () ==> ()
	paintCurrentPiece() == (
		paint(currentPiece.getTiles(), currentPiece.getSymbol());
	);
	
	private removeCurrentPiece: () ==> ()
	removeCurrentPiece() == (
		paint(currentPiece.getTiles(), ' ');
	);
	
	private paint: seq of Piece`Coordinate * char ==> ()
	paint(positions, symbol) == (
		for pos in positions do (
			table(pos.y)(pos.x) := symbol;
		);
	);
	
	private getCurrentPieceHorizontalInitialPositions: () ==> seq of nat1
	getCurrentPieceHorizontalInitialPositions() == (
		dcl positions: seq of nat1 := [];
		dcl inc: nat1 := 1;
		dcl result: bool * bool := checkBoardCollisionInX(inc);
		while not result.#2 do (
			if not result.#1 then (
				positions := positions ^ [inc];
			);
			inc := inc + 1;
			result := checkBoardCollisionInX(inc);
		);
		return positions;
	);
	
	private checkBoardCollisionInX: nat1 ==> bool * bool
	checkBoardCollisionInX(x) == (
		dcl rightSideCollision: bool := false;
		dcl leftSideCollision: bool := false;
		for t in currentPiece.getTiles() do (
			if t.x + x > columns then rightSideCollision := true;
			if t.x + x <= 0  then leftSideCollision := true;
		);
		return mk_(leftSideCollision, rightSideCollision);
	);
	
	private clearTable: () ==> ()
	clearTable() == (
		for y = 1 to rows do (
			for x = 1 to columns do (
				table(y)(x) := ' ';
			);
		);
	);
	
	public print: () ==> ()
	print() == (
		IO`print("#");
		for inc = 1 to columns do (
			IO`print("#");
		);
		IO`println("#");
		for e in table do (
			IO`print("#");
			IO`print(e);
			IO`println("#");
		);
		IO`print("#");
		for inc = 1 to columns do (
			IO`print("#");
		);
		IO`println("#");
	);
			
functions

traces

end Tetris