class Tetris

types
	public Row = seq of char;
	
values
	private EMPTY_TILE: char = ' ';
	private PIECE_TYPES: seq of Piece`Type = [<I>, <J>, <L>, <O>, <S>, <T>, <Z>];
	private PIECE_SYMBOLS: seq of char = ['I', 'J', 'L', 'O', 'S', 'T', 'Z'];

instance variables
	private finished: bool;
	private linesCleared: nat;
	private rows: nat;
	private columns: nat;
	private table: seq of Row;
	public currentPiece: Piece;
	
operations
	public Tetris: nat * nat ==> Tetris
	Tetris(r,c) == (
		finished := false;
		linesCleared := 0;
		rows := r;
		columns := c;
		table := [];
		for inc1 = 1 to rows do (
			dcl tempRow: Row := [];
			for inc2 = 1 to columns do (
				tempRow := tempRow ^ [EMPTY_TILE];
			);
			table := table ^ [tempRow];
		);
		return self;
	)
	pre r > c
	post len table = r;
	
	private setRandomPiece: () ==> ()
	setRandomPiece() == (
		dcl rand: int := MATH`rand(len PIECE_TYPES) + 1;
		dcl randRot: int := MATH`rand(4) + 1;
		dcl positions: seq of nat1;
		currentPiece := Piece`createNewPiece(PIECE_TYPES(rand), PIECE_SYMBOLS(rand));
		currentPiece.rotate(randRot);
		positions := getCurrentPieceHorizontalInitialPositions();
		currentPiece.move(positions(MATH`rand(len positions) + 1), 0);
		while checkBoardCollisionInY() do 
			currentPiece.move(0, 1);
		paintCurrentPiece();
	);
	
	public isGameFinished: () ==> bool
	isGameFinished() == (
		return finished;
	);
	
	public getBoard: () ==> seq of Row
	getBoard() == (
		return table;
	);
	
	private moveCurrentPiece: int * int ==> ()
	moveCurrentPiece(x,y) == (
		removeCurrentPiece();
		currentPiece.move(x,y);
		paintCurrentPiece();
	);
	
	public moveCurrentPieceDown: () ==> ()
	moveCurrentPieceDown() == (
			moveCurrentPiece(0,1);
	);
	
	public moveCurrentPieceUp: () ==> ()
	moveCurrentPieceUp() == (
			moveCurrentPiece(0,-1);
	);
	
	public moveCurrentPieceLeft: () ==> ()
	moveCurrentPieceLeft() == (
		moveCurrentPiece(-1,0);
	);
	
	public moveCurrentPieceRight: () ==> ()
	moveCurrentPieceRight() == (
		moveCurrentPiece(1,0);
	);
	
	public rotate: () ==> ()
	rotate() == (
		removeCurrentPiece();
		rotateCurrentPiece(currentPiece.getRotation());
	);
	
	private rotateCurrentPiece: nat1 ==> ()
	rotateCurrentPiece(rot) == (
		dcl originalTranslation: Piece`Coordinate := currentPiece.getTranslation();
		dcl originalRot: nat1 := currentPiece.getRotation();
		dcl valid: bool := false;
		while not valid do (
			dcl boardCheck: bool * bool * bool * bool := checkBoardOverlap();
			if boardCheck.#1 or boardCheck.#2 or boardCheck.#3 or boardCheck.#4 then (
				if boardCheck.#1 then currentPiece.move(0, 1);
				if boardCheck.#2 then currentPiece.move(0, -1);
				if boardCheck.#3 then currentPiece.move(1, 0);
				if boardCheck.#4 then currentPiece.move(-1, 0);
			) else (
				valid := true;
			);
		);
		if checkOverlap() then (
			currentPiece.setTranslation(originalTranslation.x, originalTranslation.y);
			currentPiece.rotate(originalRot);
			paintCurrentPiece();
		);
		paintCurrentPiece();
	);
	
	private checkBoardOverlap: () ==> bool * bool * bool * bool
	checkBoardOverlap() == (
		dcl up: bool := false;
		dcl down: bool := false;
		dcl left: bool := false;
		dcl right: bool := false;
		for tile in currentPiece.getSprite() do (
			if tile.y < 1 then up := true;
			if tile.x < 1 then left := true;
			if tile.x > columns then right := true;
			if tile.y > rows then down := true;
		);
		return mk_(up, down, left, right);
	);
	
	private checkOverlap: () ==> bool
	checkOverlap() == (
		for tile in currentPiece.getSprite() do (
			if table(tile.y)(tile.x) <> ' ' then return true;
		);
		return false;
	);
	
	public checkDownCollision: Piece`Sprite ==> bool
	checkDownCollision(sp) == (
		for tile in sp do (
			if tile.y <> rows then (
				if table(tile.y + 1)(tile.x) <> ' ' and mk_Piece`Coordinate(tile.x, tile.y + 1) not in set elems sp then
					return true;
			) else
				return true;
		);
		return false;
	);
	
	public checkRightCollision: Piece`Sprite ==> bool
	checkRightCollision(sp) == (
		for tile in sp do (
			if tile.x <> columns then (
				if table(tile.y)(tile.x + 1) <> ' ' and mk_Piece`Coordinate(tile.x + 1, tile.y) not in set elems sp then
					return true;
			) else
				return true;
		);
		return false;
	);
	
	public checkLeftCollision: Piece`Sprite ==> bool
	checkLeftCollision(sp) == (
		for tile in sp do (
			if tile.x <> 1 then (
				if table(tile.y)(tile.x - 1) <> ' ' and mk_Piece`Coordinate(tile.x - 1, tile.y) not in set elems sp then
					return true;
			) else
				return true;
		);
		return false;
	);
	
	public drop: () ==> ()
	drop() == (
		while not checkDownCollision(currentPiece.getSprite()) do moveCurrentPieceDown();
	);
	
	private checkLines: () ==> ()
	checkLines() == (
		dcl completeRows: seq of Row := [ r | r in seq table & ' ' not in set elems r];
		dcl incompleteRows: seq of Row := [ r | r in seq table & ' ' in set elems r];
		linesCleared := linesCleared + len completeRows;
		clearTable();
		for inc = 1 to len incompleteRows do (
			table(inc) := incompleteRows(inc);
		);
	);
	
	public init: () ==> ()
	init() == (
		setRandomPiece();
	);
	
	public next: () ==> ()
	next() == (
		if checkDownCollision(currentPiece.getSprite()) then (
			checkLines();
		) else (
			moveCurrentPieceDown();
		)
	);
	
	public paintCurrentPiece: () ==> ()
	paintCurrentPiece() == (
		paint(currentPiece.getSprite(), currentPiece.getSymbol());
	);
	
	public removeCurrentPiece: () ==> ()
	removeCurrentPiece() == (
		paint(currentPiece.getSprite(), ' ');
	);
	
	private paint: seq of Piece`Coordinate * char ==> ()
	paint(positions, symbol) == (
		for pos in positions do (
			table(pos.y)(pos.x) := symbol;
		);
	);
	
	private getCurrentPieceHorizontalInitialPositions: () ==> seq of nat1
	getCurrentPieceHorizontalInitialPositions() == (
		dcl positions: seq of nat1 := [];
		dcl inc: nat1 := 1;
		dcl result: bool * bool := checkBoardCollisionInX(inc);
		while not result.#2 do (
			if not result.#1 then (
				positions := positions ^ [inc];
			);
			inc := inc + 1;
			result := checkBoardCollisionInX(inc);
		);
		return positions;
	);
	
	private checkBoardCollisionInX: nat1 ==> bool * bool
	checkBoardCollisionInX(x) == (
		dcl rightSideCollision: bool := false;
		dcl leftSideCollision: bool := false;
		for t in currentPiece.getSprite() do (
			if t.x + x > columns then rightSideCollision := true;
			if t.x + x <= 0  then leftSideCollision := true;
		);
		return mk_(leftSideCollision, rightSideCollision);
	);
	
	private checkBoardCollisionInY: () ==> bool
	checkBoardCollisionInY() == (
		for t in currentPiece.getSprite() do (
			if t.y <= 0 then return true;
		);
		return false;
	);
	
	private clearTable: () ==> ()
	clearTable() == (
		for y = 1 to rows do (
			for x = 1 to columns do (
				table(y)(x) := ' ';
			);
		);
	);
	
	public print: () ==> ()
	print() == (
		IO`print("#");
		for inc = 1 to columns do (
			IO`print("#");
		);
		IO`println("#");
		for e in table do (
			IO`print("#");
			IO`print(e);
			IO`println("#");
		);
		IO`print("#");
		for inc = 1 to columns do (
			IO`print("#");
		);
		IO`println("#");
	);
			
functions

traces

end Tetris